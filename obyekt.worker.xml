<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2016.2.1 (Build 803U)" ts="2017-02-15 14:28:22">
<Class name="obyekt.worker">
<Description><![CDATA[
<h1>OB'YEKT WORKER CACHÉ INTERSYSTEMS</h1><br/>
<b>Initially Projected By: </b><i>Andrei Luiz Nenevê</i><br/>]]></Description>
<Super>%RegisteredObject</Super>
<TimeChanged>64329,51226.880104</TimeChanged>
<TimeCreated>64323,52382.607621</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// General Methods

]]></Content>
</UDLText>

<Method name="Ternary">
<Description><![CDATA[
Method similar to ternary in other languages: (a==b)?(a):(b)
<example>
Set a = 1
Set b = ##class(obyekt.worker).%New().Ternary(a=1,1,0)
; b = 1
Set b = ##class(obyekt.worker).%New().Ternary(a=0,1,0)
; b = 0
</example>]]></Description>
<FormalSpec>pCondition,pTrue,pFalse</FormalSpec>
<Implementation><![CDATA[
	Quit:pCondition pTrue
	Quit pFalse
]]></Implementation>
</Method>

<Method name="IfOrElse">
<Description>
Shortcut to Ternary</Description>
<FormalSpec>pCondition,pTrue,pFalse</FormalSpec>
<Implementation><![CDATA[	Quit ..Ternary(pCondition,pTrue,pFalse)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// DynamicObject Methods

]]></Content>
</UDLText>

<Method name="SearchInObject">
<Description><![CDATA[
Do a search by value in DynamicObject returning the key
<example>
Set obj = {"A":"An simple Value","N":"Anything"}
Set Worker = ##class(obyekt.worker).%New()
Do Worker.SearchInObject("An simple Value",obj, .Key) //Or .Search or .SIO
Write Key
; A
</example>]]></Description>
<FormalSpec>pValue,pObject:%DynamicObject,*pKey</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set iter = pObject.%GetIterator()
		While iter.%GetNext(.key , .value ) {
	    	Set:pValue=value pKey = key
	    }
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="SIO">
<Description>
Shortcut to SearchInObject</Description>
<FormalSpec>pValue,pObject:%DynamicObject,*pKey</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit ..SearchInObject(pValue,pObject,.pKey)
]]></Implementation>
</Method>

<Method name="Search">
<Description>
Shortcut to SearchInObject</Description>
<FormalSpec>pValue,pObject:%DynamicObject,*pKey</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit ..SearchInObject(pValue,pObject,.pKey)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// DynamicArray Methods

]]></Content>
</UDLText>

<Method name="SearchInArray">
<Description><![CDATA[
Do a search by value in DynamicArray returning the keys(array)<br/>
<b>pKeys</b> = Number of matches<br/>
<b>pKeys(0)</b> = First match, <b>pKeys(1)</b> = Second match, <b>pKeys(n)</b> = N match<br/>
<example>
Set Arr = ["A","B","C","D","E","C"]
Set Worker = ##class(obyekt.worker).%New()
Do Worker.SearchInArray("C",Arr, .Keys) //Or .SIA
Write Keys //Number of matches
; 2
For i=1:1:Keys { Write Keys(i),!} //Position 2 and 5 of the DynamicArray
;2
;5
</example>]]></Description>
<FormalSpec>pValue,pArray:%DynamicArray,*pKeys</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set iter = pArray.%GetIterator()
		Set pKeys = 0
		Set tCount = 0
		While iter.%GetNext(.key , .value ) {
	    	If pValue = value{ 
	    		Set tCount = tCount + 1
	    		Set pKeys = tCount
	    		Set pKeys(tCount) = key
	    	}
	    }
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="SIA">
<Description>
Shortcut to SearchInArray</Description>
<FormalSpec>pValue,pArray:%DynamicArray,*pKeys</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit ..SearchInArray(pValue,pArray,.pKeys)
]]></Implementation>
</Method>

<Method name="Slice">
<Description><![CDATA[
Similar to Slice in JS<br/>
If initial position is not passed its will do from the beggining of the array<br/>
If end position is not passed its will do till the end of the array.
<example>
Set Arr = ["A","B","C","D","E","C"]
Set Worker = ##class(obyekt.worker).%New()
Set newArr = Worker.Slice(Arr, 0, 2)
Write newArr.%ToJSON()
; ["A","B","C"]
</example>]]></Description>
<FormalSpec>pArray:%DynamicArray,pInitPosition:%Integer=0,pEndPosition:%Integer=0,*tSC</FormalSpec>
<ReturnType>%DynamicArray</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set tNewArray  = ##class(%DynamicArray).%New()
		Set tEnd = ..Ternary(pEndPosition=0, pArray.%Size(), pEndPosition)
		For i=pInitPosition:1:tEnd{
			$$$THROWONERROR(tSC, tNewArray.%Push(pArray.%Get(i)))
		}
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tNewArray
]]></Implementation>
</Method>

<Method name="Join">
<Description><![CDATA[
Similar to Join in JS<br/>
Default char of join is ','
<example>
Set Arr = ["A","B","C","D","E","C"]
Set Worker = ##class(obyekt.worker).%New()
Write Worker.Join(Arr, "*")
; A*B*C*D*E*C
</example>]]></Description>
<FormalSpec>pArray:%DynamicArray,pDelimiter:%String=",",*tSC</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set iter = pArray.%GetIterator()
		Set return = ""
		While iter.%GetNext(.key , .value ) {
	    		Set return = ..Ternary(return="", value, return_pDelimiter_value)
	   	 }
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit return
]]></Implementation>
</Method>

<Method name="ToString">
<Description><![CDATA[
Similar to Join, but in this the delimiter will be always ','<br/>]]></Description>
<FormalSpec>pArray:%DynamicArray,*tSC</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ..Join(pArray, ",", .tSC)
]]></Implementation>
</Method>

<Method name="Split">
<Description><![CDATA[
Similar to Split in JS<br/>
<example>
Set Str = "A*B*C*D*E"
Set Worker = ##class(obyekt.worker).%New()
Set Arr = Worker.Split(Arr, "*")
W Arr.%ToJSON()
; ["A","B","C","D","E"]
</example>]]></Description>
<FormalSpec>pString:%String,pDelimiter:%String="",*tSC</FormalSpec>
<ReturnType>%DynamicArray</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		If pDelimiter = "" {
			Set tList = $ListBuild($Extract(pString,1,1))
			For i=2:1:$WLength(pString) {
				Set $List(tList,i) = $Extract(pString,i,i)
			}
		} Else {
			Set tList = $ListFromString(pString,pDelimiter)
		}
		Set return = ##class(%DynamicArray).%New()
		Set pointer = 0
		While $ListNext(tList,pointer,piece) {
			$$$THROWONERROR(tSC, return.%Push(piece))
		}
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit return
]]></Implementation>
</Method>

<Method name="Reverse">
<Description><![CDATA[
Similar to Reverse in JS<br/>
<example>
Set Arr = ["A","B","C","D","E"]
Set Worker = ##class(obyekt.worker).%New()
Set NewArr = Worker.Reverse(Arr)
Write NewArr.%ToJSON()
; ["E","D","C","B","A"]
</example>]]></Description>
<FormalSpec>pArray:%DynamicArray,*tSC</FormalSpec>
<ReturnType>%DynamicArray</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set return = ##class(%DynamicArray).%New()
		For i=pArray.%Size()-1:-1:0 {
			$$$THROWONERROR(tSC, return.%Push(pArray.%Get(i)))
		}
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit return
]]></Implementation>
</Method>

<Method name="Sort">
<Description><![CDATA[
Method that sorts(Quick Sort) an %DynamicArray
<example>
Set Arr = [7,4,6,5,9,3,1,8,2]
Set Worker = ##class(obyekt.worker).%New()
Set SortedArr = Worker.Sort(Arr)
Write SortedArr.%ToJSON()
; [1,2,3,4,5,6,7,8,9]
</example>]]></Description>
<FormalSpec>pArray:%DynamicArray,pInitIndex:%Integer=0,pEndIndex:%Integer=0</FormalSpec>
<Implementation><![CDATA[
	Set tEndIndex = ..Ternary(pEndIndex = 0, pArray.%Size()-1, pEndIndex)
	If ((pInitIndex < tEndIndex)&&(pInitIndex >= 0)&&(tEndIndex<pArray.%Size())&&(pArray.%Size()>0)){
		Set isNum = $Num(pArray.%Get(0))
		Set pivot = pInitIndex
		For i=pInitIndex:1:tEndIndex {
			Set j = i
			If ( ..AuxMethodGet(pArray,j,isNum) < ..AuxMethodGet(pArray, pivot, isNum)){
				Set ch = pArray.%Get(j)
				While (j > pivot){
					Do pArray.%Set(j, pArray.%Get(j-1))
					Set j = j - 1
				}
				Do pArray.%Set(j,ch)
				Set pivot = pivot + 1
			}
		}
		If (pivot-1 >= pInitIndex){
			Do ..Sort(pArray, pInitIndex, pivot-1)
		}
		If pivot+1 <= pEndIndex{
			Do ..Sort(pArray, pivot+1, pEndIndex)
		}
		Quit pArray
	} Else {
		Quit $$$NO
	}
]]></Implementation>
</Method>

<Method name="Concat">
<Description><![CDATA[
Concatenates two %DynamicArrays and return the resultant %DynamicArray<br/>
<example>
Set Arr1 = ["A","B","C"]
Set Arr2 = ["D","E","F"]
Set Worker = ##class(obyekt.worker).%New()
Set NewArr = Worker.Concat(Arr1,Arr2)
Write NewArr.%ToJSON()
; ["A","B","C","D","E","F"]
</example>]]></Description>
<FormalSpec>pArray1:%DynamicArray,pArray2:%DynamicArray,*tSC</FormalSpec>
<ReturnType>%DynamicArray</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set return = pArray1
		Set iter = pArray2.%GetIterator()
		While iter.%GetNext(.key , .value ) {
			$$$THROWONERROR(tSC, return.%Push(value))
		}
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit return
]]></Implementation>
</Method>

<Method name="Fill">
<Description><![CDATA[
Fill and return a %DynamicArray with values<br/>
If not specified the init and end index it will do for entire array
<example>
Set Arr = ["A","B","C"]
Set Worker = ##class(obyekt.worker).%New()
Set Arr = Worker.Fill(Arr,"X")
Write Arr.%ToJSON()
; ["X","X","X"]
</example>]]></Description>
<FormalSpec>pArray:%DynamicArray,pValue,pInitIndex:%Integer=0,pEndIndex:%Integer=0,*tSC</FormalSpec>
<ReturnType>%DynamicArray</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set tEndIndex = ..Ternary(pEndIndex=0,pArray.%Size()-1,pEndIndex)
		Set iter = pArray.%GetIterator()
		While iter.%GetNext(.key , .value ) {
			Quit:tEndIndex+1=key
			$$$THROWONERROR(tSC, pArray.%Set(key, pValue))
		}
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit pArray
]]></Implementation>
</Method>

<Method name="AuxMethodGet">
<FormalSpec>pArray:%DynamicArray,pIndex:%Integer,pIsNum:%Boolean=1</FormalSpec>
<Implementation><![CDATA[	Quit ..Ternary(pIsNum=1, pArray.%Get(pIndex), $ASCII($Extract(pArray.%Get(pIndex),1,1)))
]]></Implementation>
</Method>

<Method name="Min">
<Description><![CDATA[
Returns the minimal element in the enumerable according
to Cache's term ordering. <br>
If multiple elements are considered minimal, the first one that was found
is returned.
<example>
Set ArrMin = [7,4,6,5,9,3,1,8,2]
Set Worker = ##class(obyekt.worker).%New()
Set tSC = Worker.Min(ArrMin,.Minimal)
Write Minimal
; 1
</example>]]></Description>
<FormalSpec>pArray:%DynamicArray,*pMin</FormalSpec>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set SortedArr = ..Sort(pArray), pMin = SortedArr.%Get(0)
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>
</Export>
